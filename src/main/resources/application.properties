spring.application.name=Schedule Parser

# Using -dev properties
spring.profiles.active=dev

# Kafka prod config
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVER:some.kafka.server}
kafka.topic.parsing-queue=${PARSE_QUEUE:PARSE_QUEUE}
kafka.topic.parsing-result=${PARSING_RESULT_QUEUE:PARSING_RESULT_QUEUE}
kafka.topic.parsing-failure=${PARSING_FAILURE_QUEUE:PARSING_FAILURE_QUEUE}
spring.kafka.consumer.enable-auto-commit=true
spring.kafka.ssl.key-store-type=JKS
spring.kafka.ssl.trust-store-type=JKS
spring.kafka.listener.concurrency=${KAFKA_LISTEN_THREAD_COUNT:7}
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.security.protocol=SSL
spring.kafka.ssl.key-password=${SSL_KEY_PASS:password}
spring.kafka.ssl.trust-store-location=${TRUST_STORE_LOCATION:src/test/resources/kafka/kafka.client.truststore.jks}
spring.kafka.ssl.trust-store-password=${TRUST_STORE_PASSWORD:password}
spring.kafka.ssl.key-store-location=${KEY_STORE_LOCATION:src/test/resources/kafka/kafka.client.keystore.jks}
spring.kafka.ssl.key-store-password=${KEY_STORE_PASSWORD:password}

# HTTP config
http.client.connection-timeout=25000
http.client.socket-timeout=25000
http.client.request-timeout=25000

# Redis prod config
spring.data.redis.host=${REDIS_PROD_HOST:some.redis.host}
spring.data.redis.port=${REDIS_PROD_PORT:6379}
spring.data.redis.password=${REDIS_PROD_PASS:some_redis_password}
spring.data.redis.timeout=${REDIS_TIMEOUT:5000}
spring.data.redis.ssl.enabled=true
server.ssl.key-store=${KEY_STORE_LOCATION:src/test/resources/kafka/kafka.client.keystore.jks}
server.ssl.key-store-password=${KEY_STORE_PASS:password}
server.ssl.trust-store=${TRUST_STORE_LOCATION:src/test/resources/kafka/kafka.client.truststore.jks}
server.ssl.trust-store-password=${TRUST_STORE_PASS:password}

# Proxy config
http.client.proxy.enabled=${PROXY_ENABLED:true}
http.client.proxy.host=${PROXY_HOST:some.proxy.host}
http.client.proxy.port=${PROXY_PORT:8080}

# Metrics Grafana
management.server.port=8091
management.endpoints.web.exposure.include=health,prometheus
management.prometheus.metrics.export.enabled=true
management.metrics.distribution.percentiles-histogram."[http.server.requests]"=true
